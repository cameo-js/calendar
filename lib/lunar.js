exports.Lunar = Lunar;

function Lunar(){

}
Lunar.prototype = {
	solMonthDay : [31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
	SOLAR_TO_LUNAR : 1,
	LUNAR_TO_SOLAR : 2,
	lunarToSolar : function(year, month, day, leapmonth){
		return this.calculateDate(year, month, day, this.LUNAR_TO_SOLAR, leapmonth);
	},
	solarToLunar : function(year, month, day){
		return this.calculateDate(year, month, day, this.SOLAR_TO_LUNAR, 0);
	},
	calculateDate : function(year, month, day, type, leapmonth){
		sMonthDay = this.solMonthDay;
		lMonthTable = this.lunarMonthTable;
		var sYear,sMonth,sDay
		    ,lYear,lMonth,lDay;
		var lunLeapMonth,lunMonthDay;
		var i,lunIndex;

		if ( !this.checkValidDate(year) ) {
			return false;
		}
		if ( year >= 2000) {
			/* 기준일자 양력 2000년 1월 1일 (음력 1999년 11월 25일) */
			sYear = 2000, sMonth = 1, sDay = 1;
			lYear = 1999, lMonth = 11, lDay = 25;
			lunLeapMonth = 0;
			sMonthDay[1] = 29;
			lunMonthDay = 30;
		} else {
			/* 기준일자 양력 1900년 1월 1일 (음력 1899년 12월 1일) */
			sYear = 1900, sMonth = 1, sDay = 1;
			lYear = 1899, lMonth = 12, lDay = 1;
			lunLeapMonth = 0;
			sMonthDay[1] = 28;
			lunMonthDay = 30;
		}
		lunIndex = lYear - 1899;
		
		while(true){
			if ( type == this.SOLAR_TO_LUNAR && year == sYear && month == sMonth && day == sDay ) {
				return {"year" : lYear, "month" : lMonth, "day" : lDay, "leapmonth" : lunLeapMonth };
			} else if ( type == this.LUNAR_TO_SOLAR && year == lYear && month == lMonth && day == lDay && leapmonth == lunLeapMonth ) {
				return {"year" : sYear, "month" : sMonth, "day" : sDay, "leapmonth" : 0 };
			}

			if ( sMonth == 12 && sDay == 31 ) {
				sYear++; sMonth = 1; sDay = 1;
				if ( sYear % 400 == 0 ) {
					sMonthDay[1] = 29;
				} else if ( sYear % 100 == 0 ) {
					sMonthDay[1] = 28;
				} else if ( sYear % 4 == 0 ) {
					sMonthDay[1] = 29;
				} else {
					sMonthDay[1] = 28;
				}
			}else if ( sMonthDay[sMonth - 1] == sDay ){
				sMonth++; sDay = 1;
			} else {
				sDay++;
			}

			if ( lMonth == 12 && (( lMonthTable[ lunIndex ][ lMonth - 1] == 1 && lDay == 29 ) || ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 2 && lDay == 30 ))) {
				lYear++; lMonth = 1; lDay = 1;
				if ( lYear > 2043 ) {
					return false;
				}
				lunIndex = lYear - 1899;
				if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 1 )
					lunMonthDay = 29;
				else if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 2 )
					lunMonthDay = 30;
			} else if ( lDay == lunMonthDay ) {
				if ( lMonthTable[ lunIndex ][ lMonth - 1 ] >= 3 && lunLeapMonth == 0 ){
					lDay = 1; lunLeapMonth = 1;
				} else {
					lMonth++; lDay = 1; lunLeapMonth = 0;
				}

				if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 1 )
					lunMonthDay = 29;
				else if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 2 )
					lunMonthDay = 30;
				else if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 3 )
					lunMonthDay = 29;
				else if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 4 && lunLeapMonth == 0 )
					lunMonthDay = 29;
				else if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 4 && lunLeapMonth == 1 )
					lunMonthDay = 30;
				else if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 5 && lunLeapMonth == 0 )
					lunMonthDay = 30;
				else if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 5 && lunLeapMonth == 1 )
					lunMonthDay = 29;
				else if ( lMonthTable[ lunIndex ][ lMonth - 1 ] == 6 )
					lunMonthDay = 30;
			} else {
				lDay++;
			}
		}
	},
	checkValidDate : function(year){
		if ( year < 1900 || year > 2040 ) {
			return false;
		} else {
			return true;
		}
	}
}



Lunar.prototype.lunarMonthTable = [
	[2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],  [1, 2, 1, 1, 2, 1, 2, 5, 2, 2, 1, 2],  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],   
	[2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],  [1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2],  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1],  [2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2],  [1, 2, 2, 4, 1, 2, 1, 2, 1, 2, 1, 2],
	[1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],  [2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],  [1, 5, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],  [2, 1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2],   
	[2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],  [2, 2, 1, 2, 5, 1, 2, 1, 2, 1, 1, 2],  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],  [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
	[2, 3, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1],  [2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],  [1, 2, 1, 1, 2, 1, 5, 2, 2, 1, 2, 2],  [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],  [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],   
	[2, 1, 2, 2, 3, 2, 1, 1, 2, 1, 2, 2],  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2],  [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],  [2, 1, 2, 5, 2, 1, 2, 2, 1, 2, 1, 2],  [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
	[2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],  [1, 5, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2],  [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],  [1, 2, 2, 1, 1, 5, 1, 2, 1, 2, 2, 1],  [2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1],   
	[2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],  [1, 2, 2, 1, 6, 1, 2, 1, 2, 1, 1, 2],  [1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2],  [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],  [2, 1, 4, 1, 2, 1, 2, 1, 2, 2, 2, 1],
	[2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],  [2, 2, 1, 1, 2, 1, 4, 1, 2, 2, 1, 2],  [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2],  [2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],  [2, 2, 1, 2, 2, 4, 1, 1, 2, 1, 2, 1],  
	[2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2],  [1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],  [1, 1, 2, 4, 1, 2, 1, 2, 2, 1, 2, 2],  [1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],
	[2, 5, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],  [2, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2],  [2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],   
	[1, 2, 1, 2, 4, 2, 1, 2, 1, 2, 1, 2],  [1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2],  [1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],  [2, 1, 4, 1, 1, 2, 1, 2, 1, 2, 2, 2],  [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
	[2, 1, 2, 1, 2, 1, 1, 5, 2, 1, 2, 2],  [1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],  [2, 1, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1],  [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],   
	[1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],  [2, 1, 2, 3, 2, 1, 2, 1, 2, 2, 2, 1],  [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],  [1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2],  [1, 2, 5, 2, 1, 1, 2, 1, 1, 2, 2, 1],
	[2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2],  [1, 2, 2, 1, 2, 1, 5, 2, 1, 2, 1, 2],  [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],  [2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],  [1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1, 2],   
	[1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],  [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1],  [2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1, 2],  [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],  [2, 2, 1, 2, 1, 2, 1, 5, 2, 1, 1, 2],
	[2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1],  [2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],  [2, 1, 1, 2, 1, 6, 1, 2, 2, 1, 2, 1],  [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],  [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],  
	[2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2, 2],  [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],  [2, 1, 2, 2, 1, 1, 2, 1, 1, 5, 2, 2],  [1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],  [1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],
	[2, 1, 2, 2, 1, 5, 2, 2, 1, 2, 1, 2],  [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],  [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],  [1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2, 2],  [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],   
	[1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],  [1, 2, 5, 2, 1, 2, 1, 1, 2, 1, 2, 1],  [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],  [1, 2, 2, 1, 2, 2, 1, 5, 2, 1, 1, 2],  [1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
	[1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],  [2, 1, 1, 2, 3, 2, 2, 1, 2, 2, 2, 1],  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],  [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1],  [2, 2, 2, 3, 2, 1, 1, 2, 1, 2, 1, 2],  
	[2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],  [2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2],  [1, 5, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],  [1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1],  [2, 1, 2, 1, 2, 1, 5, 2, 2, 1, 2, 2],
	[1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],  [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],  [2, 2, 1, 1, 5, 1, 2, 1, 2, 1, 2, 2],  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],  [2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],   
	[2, 1, 6, 2, 1, 2, 1, 1, 2, 1, 2, 1],  [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],  [1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 1, 2],  [1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1],  [2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],
	[2, 1, 1, 2, 3, 2, 1, 2, 1, 2, 2, 2],  [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],  [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],  [2, 1, 2, 5, 2, 1, 1, 2, 1, 2, 1, 2],  [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],   
	[2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2],  [1, 5, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],  [1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],  [2, 1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1],  [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
	[1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2],  [1, 2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1],  [2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2],  [1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1],  [2, 1, 5, 2, 1, 2, 2, 1, 2, 1, 2, 1],   
	[2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 5, 2],  [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],  [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],  [2, 2, 1, 2, 1, 4, 1, 1, 2, 2, 1, 2],
	[2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],  [2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1],  [2, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 1],  [2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1],  [2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],  
	[1, 5, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],  [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2]
];


